pipeline {
    agent {
      node {
        // spin up a cat custom slave pod to run this build on
       label 'maven'
      }
    }
    /* options {
        // set a timeout of 20 minutes for this pipeline
        //timeout(time: 20, unit: 'MINUTES')
    } */

                    environment {
                        BUILD_NAME = 'sample-go-app'
                        BUILD_NAMESPACE = 'build'
                        CI_NAMESPACE = 'cicd'
                        GIT_BRANCH = sh(returnStdout: true, script: 'git ls-remote --heads origin | grep $(git rev-parse HEAD) | cut -d / -f 3').trim()
                        GIT_COMMIT = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()
                        RELEASE='1.0.0'
                        IMAGE_TAG="${RELEASE}-${GIT_BRANCH}-${GIT_COMMIT}-${BUILD_NUMBER}"
                        DEV_NAMESPACE = 'dev'
                        IMAGE_NAME = 'sample-go-app'
                        JENKINS_SA = 'jenkins'
                        IMAGE_REGISTRY = 'image-registry.openshift-image-registry.svc:5000'
                        JENKINS_SA_TOKEN = sh(returnStdout: true, script: 'cat /var/run/secrets/kubernetes.io/serviceaccount/token').trim()
                
                    }
                    stages {
                        stage('preamble') {
                            steps {
                                

                                script {
                                    openshift.withCluster() {
                                        openshift.withProject() {
                                            //shortCommit = sh(returnStdout: true, script: "git rev-parse --short HEAD").trim()
                                            
                                            echo "Using project: ${openshift.project()}"
                                            echo "currently running from " + GIT_BRANCH +  " branch"
                                            echo "jenkins build number is ${BUILD_NUMBER}"
                                        }
                                    }
                                }
                            }
                        }
        
        stage('Create Image Builder') {
            when {
                expression {
                    openshift.withCluster() {
                    openshift.withProject(BUILD_NAMESPACE) {
                        return !openshift.selector("bc", "${BUILD_NAME}").exists();
                        }
                    }
                }
            }
            steps {
                script {
                    openshift.withCluster() {
                        openshift.withProject(BUILD_NAMESPACE) {
                            openshift.newApp("./pipeline/cicd-template.yaml")
                        }
                    }
                }//script
            }//steps
        } // stage

        stage('Build Application Docker Image') {
            steps {
                script {
                        openshift.withCluster() {
                        openshift.withProject(env.BUILD_NAMESPACE) {
                        def bc = openshift.selector('bc', BUILD_NAME).object()
                        print bc.spec.output.to.name
                        bc.spec.output.to.name = BUILD_NAME + ':' + RELEASE + "-" + GIT_BRANCH + "-"+ GIT_COMMIT + "-" + BUILD_NUMBER
                        print bc.spec.output.to.name
                        openshift.apply(bc)
                        openshift.selector("bc", "$BUILD_NAME").startBuild("--from-file=./base/", "--wait=true" )
                        }
                    }

                }//script
            }//steps
        }//stage
        stage('Scan and tag develop') {
            steps {
                script {
                    openshift.withCluster() {
                                openshift.tag("${env.IMAGE_REGISTRY}/${env.BUILD_NAMESPACE}/${env.IMAGE_NAME}:${env.IMAGE_TAG}", "${env.IMAGE_REGISTRY}/${env.DEV_NAMESPACE}/${env.IMAGE_NAME}:${env.IMAGE_TAG}")
                            }
                    }//script
                } // steps
         }//stage
        stage('deploy to DEV') {
         steps {
            sh '''#!/bin/bash
            kustomize edit set image image=${env.DEV_NAMESPACE}/${env.IMAGE_NAME}:${env.IMAGE_TAG}
              kustomize build | oc apply -f- -n dev
            '''
            } // steps
         }//stage
    }//stages
    post {
        always {
            echo 'Build and deployment of sample go application has completed'
        }
        success {
            echo 'Build was successful'
        }
        failure {
            echo 'Build has failed'
        }
        unstable {
            echo 'There was some issue with the build check the logs'
        }
        changed {
            echo 'Commit message has proven to pass this build'

        }
    }
} // pipeline